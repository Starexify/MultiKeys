import flixel.FlxG;
import funkin.data.song.importer.FNFLegacyImporter;
import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.ScriptedModule;
import funkin.modding.PolymodHandler;
import funkin.play.notes.Strumline;
import funkin.ui.debug.charting.ChartEditorState;
import funkin.ui.debug.charting.handlers.ChartEditorThemeHandler;
import funkin.ui.debug.charting.handlers.ChartEditorToolboxHandler;
import funkin.util.FileUtilSandboxed;
import funkin.util.ReflectUtil;
import funkin.util.SerializerUtil;
import haxe.ui.components.Label;
import haxe.ui.components.NumberStepper;
import haxe.ui.components.VerticalRule;
import haxe.ui.containers.Box;
import haxe.ui.containers.Frame;
import haxe.ui.containers.Grid;
import haxe.ui.containers.HBox;
import haxe.ui.events.UIEvent;

class MultikeyCompat extends ScriptedModule {
    var chartEditor:ChartEditorState;

    var box:Null<Box>;

    var passedEvents:Array<SongEventData> = [];
    var lastPosition:Float = 0;

    var addedComponent:Bool;
    var addedKeysComponent:Bool;

    var playbarKeys:Label;
    var keyCounter:NumberStepper;

    var DEFAULT_KEY_COUNT:Int = 4;
    var metaKeyCount:Int = 4;
    var lastKeyCount:Int = 4;

    var prevSongId:String;
    var prevDifficulty:String;
    var prevVariation:String;

    function new() {
        super("MultikeyCompat", 1);
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (!(event.targetState is ChartEditorState)) {
            chartEditor = null;
            return;
        }
        chartEditor = event.targetState;

        // Add Keys to the Playbar
        if (box == null) box = chartEditor.root.findComponent("playbar", Box, false);
        if (!addedKeysComponent && box != null) {
            var hbox = box.findComponents(null, HBox, 1)[2];
            if (hbox != null) {
                var remainingLabel = hbox.findComponent("playbarSongRemaining", Label, false);
                if (remainingLabel != null) hbox.removeComponent(remainingLabel);

                var rule = new VerticalRule();
                rule.percentHeight = 80;

                playbarKeys = new Label();
                playbarKeys.id = "playbarKeys";
                playbarKeys.styleNames = "playbarStatus";
                playbarKeys.verticalAlign = "center";
                playbarKeys.tooltip = "Left Click to Increase Key Count\nRight Click to Decrease Key Count\nCtrl+Click to open Metadata Window";
                function updateKeysDisplay() playbarKeys.text = "Keys: " + ChartEditorState.STRUMLINE_SIZE;
                updateKeysDisplay();

                playbarKeys.onClick = (event:UIEvent) -> {
                    if (chartEditor.pressingControl()) ChartEditorToolboxHandler.setToolboxState(chartEditor, ChartEditorState.CHART_EDITOR_TOOLBOX_METADATA_LAYOUT, true);
                    else { if (ChartEditorState.STRUMLINE_SIZE < 9) {
                        ChartEditorToolboxHandler.refreshToolbox(chartEditor, ChartEditorState.CHART_EDITOR_TOOLBOX_METADATA_LAYOUT);
                        ChartEditorState.STRUMLINE_SIZE++;
                        updateChartEditor(chartEditor, ChartEditorState.STRUMLINE_SIZE);
                        updateKeysDisplay();
                    }}
                }
                playbarKeys.onRightClick = (event:UIEvent) -> if (ChartEditorState.STRUMLINE_SIZE > 1) {
                    ChartEditorToolboxHandler.refreshToolbox(chartEditor, ChartEditorState.CHART_EDITOR_TOOLBOX_METADATA_LAYOUT);
                    ChartEditorState.STRUMLINE_SIZE--;
                    updateChartEditor(chartEditor, ChartEditorState.STRUMLINE_SIZE);
                    updateKeysDisplay();
                }

                var newRemainingLabel = new Label();
                newRemainingLabel.id = "playbarSongRemaining";
                newRemainingLabel.text = "-1:00";
                newRemainingLabel.styleNames = "playbarDuration";

                hbox.addComponent(playbarKeys);
                hbox.addComponent(rule);
                hbox.addComponent(newRemainingLabel);
                chartEditor.playbarSongRemaining = newRemainingLabel;
                addedKeysComponent = true;
            }
        }

        updateChartEditor(chartEditor, DEFAULT_KEY_COUNT);
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (chartEditor == null) return;
        // Add Key Count component to the Song Metadata toolbox
        if (!addedComponent && chartEditor.activeToolboxes.exists(ChartEditorState.CHART_EDITOR_TOOLBOX_METADATA_LAYOUT)) {
            var metadataToolbox = chartEditor.activeToolboxes.get(ChartEditorState.CHART_EDITOR_TOOLBOX_METADATA_LAYOUT);
            var frameDifficulty = metadataToolbox.findComponent("frameDifficulty", Frame, true);

            if (frameDifficulty != null) {
                var grid = frameDifficulty.findComponent(null, Grid, true);
                if (grid != null) {
                    var keyCountLabel:Label = new Label();
                    keyCountLabel.text = "Key Count:";
                    keyCountLabel.verticalAlign = "center";

                    keyCounter = new NumberStepper();
                    keyCounter.id = "keyCount";
                    keyCounter.pos = ChartEditorState.STRUMLINE_SIZE;
                    keyCounter.min = 1;
                    keyCounter.max = 9;
                    keyCounter.tooltip = "Set the key count of the song variation.";
                    keyCounter.onChange = (event:UIEvent) -> updateChartEditor(chartEditor, event.target.pos);

                    grid.addComponent(keyCountLabel);
                    grid.addComponent(keyCounter);

                    metadataToolbox.height += 30;
                    frameDifficulty.height += 30;
                    addedComponent = true;
                }
            }
        }

        handleMultiMeta(chartEditor);
        handleKeyCountEvent(chartEditor);
    }

    // Handlers
    function handleMultiMeta(chartEditor:ChartEditorState) {
        if (prevSongId == chartEditor.currentSongId && prevDifficulty == chartEditor.selectedDifficulty && prevVariation == chartEditor.selectedVariation) return;
        prevSongId = chartEditor.currentSongId;
        prevDifficulty = chartEditor.selectedDifficulty;
        prevVariation = chartEditor.selectedVariation;

        var metadataPath = buildMetadataPath(chartEditor);
        var jsonPath = Paths.json(metadataPath);
        if (Assets.exists(jsonPath)) {
            var prevMeta = SerializerUtil.fromJSON(Assets.getText(jsonPath));
            if (prevMeta?.playData?.keyCounts != null) {
                var extractedCount = ReflectUtil.getProperty(prevMeta.playData.keyCounts, prevDifficulty);
                if (extractedCount != null) metaKeyCount = extractedCount;
            } else {
                var multiMeta = readKeyCount("data/songs/" + prevSongId + "/" + prevSongId + "-multimeta");
                if (multiMeta?.keyCounts?.variation != null) {
                    var variationData = ReflectUtil.getProperty(multiMeta.keyCounts.variation, prevVariation);
                    if (variationData != null) {
                        var multiKeyCount = ReflectUtil.getProperty(variationData, prevDifficulty);
                        if (multiKeyCount != null) metaKeyCount = multiKeyCount;
                    }
                }
            }
        }

        if (lastKeyCount != metaKeyCount) {
            lastKeyCount = metaKeyCount;
            updateChartEditor(chartEditor, metaKeyCount);
        }
    }

    function handleKeyCountEvent(chartEditor:ChartEditorState) {
        var currentTime = chartEditor.conductorInUse.songPosition;
        var eventsChanged = false;

        // Check if we moved backwards - if so, remove events we're no longer past
        if (currentTime < lastPosition) {
            var oldLength = passedEvents.length;
            passedEvents = passedEvents.filter((event) -> return event.time <= currentTime);
            eventsChanged = passedEvents.length != oldLength;
        }

        // Check for new overlapping events to add
        for (eventSprite in chartEditor.renderedEvents) {
            if (FlxG.overlap(chartEditor.gridPlayhead, eventSprite)) {
                if (eventSprite.eventData != null && eventSprite.eventData.eventKind == "KeyCountEvent") {

                    // Only add if we haven't seen this event before
                    var alreadyHave = false;
                    for (existingEvent in passedEvents) {
                        if (existingEvent == eventSprite.eventData) {
                            alreadyHave = true;
                            break;
                        }
                    }

                    if (!alreadyHave) {
                        passedEvents.push(eventSprite.eventData);
                        passedEvents.sort((a, b) -> return Std.int(a.time - b.time));
                        eventsChanged = true;
                    }
                }
                break;
            }
        }

        if (eventsChanged) {

            var activeKeyCount = metaKeyCount;

            if (passedEvents.length > 0) {
                // Use the most recent event we've passed
                var mostRecentEvent = passedEvents[passedEvents.length - 1];
                activeKeyCount = mostRecentEvent.value?.keyCount ?? metaKeyCount;
            }

            if (activeKeyCount != lastKeyCount) {
                if (passedEvents.length > 0) {
                    updateChartEditor(chartEditor, activeKeyCount);
                } else {
                    updateChartEditor(chartEditor, metaKeyCount);
                }
            }
        }

        lastPosition = currentTime;
    }

    // Updates the Chart Editor based on a custom Key Count
    function updateChartEditor(chartEditor:ChartEditorState, keyCount:Int) {
        //trace("[MultiKeys] Changing Chart Editor Key Count to: " + keyCount);
        if (playbarKeys != null) playbarKeys.text = "Keys: " + keyCount;
        if (keyCounter != null) keyCounter.value = keyCount;
        Strumline.KEY_COUNT = keyCount;
        ChartEditorState.STRUMLINE_SIZE = FNFLegacyImporter.STRUMLINE_SIZE = Strumline.KEY_COUNT = keyCount;
        ChartEditorThemeHandler.TOTAL_COLUMN_COUNT = ChartEditorState.STRUMLINE_SIZE * 2 + 1;
        ChartEditorState.NOTE_PREVIEW_X_POS = -(keyCount * ChartEditorState.GRID_SIZE) + 480;
        ChartEditorThemeHandler.updateGridBitmap(chartEditor);
        chartEditor.gridTiledSprite.x = chartEditor.gridPlayhead.x = chartEditor.buttonSelectOpponent.x = FlxG.width / 2 - ChartEditorState.GRID_SIZE * ChartEditorState.STRUMLINE_SIZE;
        chartEditor.notePreview.x = chartEditor.notePreviewPlayhead.x = chartEditor.notePreviewViewport.x = -(keyCount * ChartEditorState.GRID_SIZE) + 480;
        chartEditor.measureTicks.x = chartEditor.gridTiledSprite.x - ChartEditorState.GRID_SIZE;

        chartEditor.gridTiledSprite.width = chartEditor.gridBitmap.width;
        chartEditor.gridPlayhead.remove(chartEditor.gridPlayhead.members[0]);
        var playheadWidth = ChartEditorState.GRID_SIZE * (ChartEditorState.STRUMLINE_SIZE * 2 + 1) + Std.int(ChartEditorState.GRID_SIZE) * 2;
        var playheadSprite = new FunkinSprite().makeSolidColor(playheadWidth, ChartEditorState.PLAYHEAD_HEIGHT, ChartEditorState.PLAYHEAD_COLOR);
        playheadSprite.x = -ChartEditorState.PLAYHEAD_SCROLL_AREA_WIDTH;
        playheadSprite.y = 0;
        chartEditor.gridPlayhead.add(playheadSprite);

        chartEditor.buttonSelectOpponent.width = chartEditor.buttonSelectPlayer.width = ChartEditorState.GRID_SIZE * keyCount;
        chartEditor.buttonSelectPlayer.x = chartEditor.buttonSelectOpponent.x + chartEditor.buttonSelectOpponent.width;
        chartEditor.buttonSelectEvent.x = chartEditor.buttonSelectPlayer.x + chartEditor.buttonSelectPlayer.width;
        chartEditor.buttonSelectPlayer.findComponent(null, Label, false).wordWrap = chartEditor.buttonSelectOpponent.findComponent(null, Label, false).wordWrap = false;

        chartEditor.renderedNotes.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);
        chartEditor.renderedHoldNotes.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);
        chartEditor.renderedEvents.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);
        chartEditor.renderedSelectionSquares.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);

        trace(chartEditor.healthIconDad.x);
        chartEditor.healthIconBF.updateHitbox();
        chartEditor.healthIconDad.updateHitbox();
        trace(chartEditor.healthIconDad.x);
        if (chartEditor.audioWaveforms.members[0] != null)
            chartEditor.audioWaveforms.members[0].x = chartEditor.healthIconDad.x;
        if (chartEditor.audioWaveforms.members[1] != null)
            chartEditor.audioWaveforms.members[1].x = chartEditor.healthIconBF.x;

        lastKeyCount = keyCount;
    }

    // Helper methods
    function buildMetadataPath(state:ChartEditorState):String {
        var basePath = "songs/" + state.currentSongId + "/" + state.currentSongId + "-metadata";
        return state.selectedVariation == "default" ? basePath : basePath + "-" + state.selectedVariation;
    }

    function readKeyCount(path):Dynamic {
        for (mods in PolymodHandler.getAllModIds()) {
            var filePath = "mods/" + mods + "/" + path + ".json";
            if (FileUtilSandboxed.fileExists(filePath)) return FileUtilSandboxed.readJSONFromPath(filePath);
        }
    }
}