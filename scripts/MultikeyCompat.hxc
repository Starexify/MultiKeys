import funkin.data.song.importer.FNFLegacyImporter;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.ui.debug.charting.ChartEditorState;
import funkin.ui.debug.charting.handlers.ChartEditorThemeHandler;
import funkin.util.FileUtil;
import funkin.util.FileWriteMode;

import flixel.FlxG;

import haxe.ui.components.NumberStepper;
import haxe.ui.components.Label;
import haxe.ui.containers.Frame;
import haxe.ui.containers.Grid;
import funkin.play.notes.Strumline;

class MultikeyCompat extends ScriptedModule {
    var chartEditor:ChartEditorState;

    function new() {
        super("MultikeyCompat");
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (Std.isOfType(event.targetState, ChartEditorState)) {
            chartEditor = event.targetState;
            var keyCount = FileUtil.readJSONFromPath("assets/data/songs/2hot/2hot-metadata.json")?.keysCount;
            //ChartEditorState.STRUMLINE_SIZE = 1;
            //changeChartEditor(chartEditor, ChartEditorState.STRUMLINE_SIZE);
        }
    }

    var values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2];
    var currentIndex = 0;
    var timeTracker:Float = 0;
    var timeInterval:Float = 1.0;
    var addedComponent:Bool;

    override function onUpdate(event:UpdateScriptEvent) {
        if (chartEditor != null) {
            //trace(chartEditor.get_currentSongMetadata()?.keysCount);
            if (!addedComponent && chartEditor.activeToolboxes.exists(ChartEditorState.CHART_EDITOR_TOOLBOX_METADATA_LAYOUT)) {
                var metadataToolbox = chartEditor.activeToolboxes.get(ChartEditorState.CHART_EDITOR_TOOLBOX_METADATA_LAYOUT);
                var frameVariation = metadataToolbox.findComponent("frameVariation", Frame, true);

                if (frameVariation != null) {
                    var grid = frameVariation.findComponent(null, Grid, true);
                    if (grid != null) {
                        frameVariation.width += 100;
                        var keyCountLabel:Label = new Label();
                        keyCountLabel.text = "Key Count:";
                        keyCountLabel.verticalAlign = "center";
                        keyCountLabel.horizontalAlign = "right";

                        var keyCount:NumberStepper = new NumberStepper();
                        keyCount.id = "keyCount";
                        keyCount.pos = 4;
                        keyCount.min = 1;
                        keyCount.max = 9;
                        keyCount.tooltip = "Set the key count of the song variation.";

                        grid.addComponent(keyCountLabel);
                        grid.addComponent(keyCount);

                        addedComponent = true;
                    }
                }
            }
        }

        timeTracker += event.elapsed;
        if (timeTracker >= timeInterval) {
            // Reset timer
            timeTracker = 0;

            // Process the next value in our sequence
            if (chartEditor != null) {
                // Set the current value from our array
                ChartEditorState.STRUMLINE_SIZE = values[currentIndex];
                changeChartEditor(chartEditor, ChartEditorState.STRUMLINE_SIZE);

                // Increment index and wrap around if needed
                currentIndex = (currentIndex + 1) % values.length;
            }
        }
    }

    function changeChartEditor(chartEditor:ChartEditorState, keyCount:Int) {
        ChartEditorState.STRUMLINE_SIZE = keyCount;
        Strumline.KEY_COUNT = keyCount;
        FNFLegacyImporter.STRUMLINE_SIZE = keyCount;
        ChartEditorThemeHandler.TOTAL_COLUMN_COUNT = ChartEditorState.STRUMLINE_SIZE * 2 + 1;
        ChartEditorState.NOTE_PREVIEW_X_POS = -(keyCount * ChartEditorState.GRID_SIZE) + 480;
        ChartEditorThemeHandler.updateGridBitmap(chartEditor);
        chartEditor.gridTiledSprite.x = chartEditor.gridPlayhead.x = chartEditor.buttonSelectOpponent.x = FlxG.width / 2 - ChartEditorState.GRID_SIZE * ChartEditorState.STRUMLINE_SIZE;
        chartEditor.notePreview.x = chartEditor.notePreviewPlayhead.x = chartEditor.notePreviewViewport.x = -(keyCount * ChartEditorState.GRID_SIZE) + 480;
        chartEditor.measureTicks.x = chartEditor.gridTiledSprite.x - ChartEditorState.GRID_SIZE;

        chartEditor.gridTiledSprite.width = chartEditor.gridBitmap.width;

        chartEditor.gridPlayhead.remove(chartEditor.gridPlayhead.members[0]);
        var playheadWidth = ChartEditorState.GRID_SIZE * (ChartEditorState.STRUMLINE_SIZE * 2 + 1) + Std.int(ChartEditorState.GRID_SIZE) * 2;
        var playheadSprite = new FunkinSprite().makeSolidColor(playheadWidth, ChartEditorState.PLAYHEAD_HEIGHT, ChartEditorState.PLAYHEAD_COLOR);
        playheadSprite.x = -ChartEditorState.PLAYHEAD_SCROLL_AREA_WIDTH;
        playheadSprite.y = 0;
        chartEditor.gridPlayhead.add(playheadSprite);

        chartEditor.buttonSelectOpponent.width = chartEditor.buttonSelectPlayer.width = ChartEditorState.GRID_SIZE * keyCount;
        chartEditor.buttonSelectPlayer.x = chartEditor.buttonSelectOpponent.x + chartEditor.buttonSelectOpponent.width;
        chartEditor.buttonSelectEvent.x = chartEditor.buttonSelectPlayer.x + chartEditor.buttonSelectPlayer.width;
        chartEditor.buttonSelectPlayer.findComponent(null, Label, false).wordWrap = chartEditor.buttonSelectOpponent.findComponent(null, Label, false).wordWrap = false;

/*        chartEditor.renderedNotes.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);
        chartEditor.renderedHoldNotes.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);
        chartEditor.renderedEvents.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);
        chartEditor.renderedSelectionSquares.setPosition(chartEditor.gridTiledSprite?.x ?? 0.0, chartEditor.gridTiledSprite?.y ?? 0.0);*/

        chartEditor.renderedHoldNotes.clear();
        chartEditor.renderedNotes.clear();
        chartEditor.renderedEvents.clear();
        chartEditor.renderedSelectionSquares.clear();
        chartEditor.buildNoteGroup();
        chartEditor.noteDisplayDirty = true;

        for (i in 0...chartEditor.audioWaveforms.members.length) {
            var waveform = chartEditor.audioWaveforms.members[i];

            if (i == 0) waveform.x = chartEditor.healthIconDad.x - chartEditor.healthIconDad.width / 2;
            else waveform.x = chartEditor.healthIconBF.x - chartEditor.healthIconBF.width / 2;
        }
    }
}