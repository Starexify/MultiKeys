import funkin.data.animation.AnimationDataUtil;
import funkin.play.notes.NoteSprite;
import funkin.play.notes.Strumline;
import funkin.play.notes.notestyle.ScriptedNoteStyle;

class FunkinNoteStyle extends ScriptedNoteStyle {
    var mkHooks:MultikeyHooks;

    function new() {
        super("funkin");
        mkHooks = new MultikeyHooks();
    }

    override function getStrumlineAnimationData(dir) {
        var multiDir = mkHooks.MULTIKEY_DIRECTIONS[Strumline.KEY_COUNT][dir];
        var staticName = "arrow" + mkHooks.DIRECTION_NAMES[multiDir];
        var pressName = mkHooks.NOTE_COLORS[multiDir] + " press";
        var confirmName = mkHooks.NOTE_COLORS[multiDir] + " confirm";

        return [
            AnimationDataUtil.toNamed({prefix: staticName}, "static"),
            AnimationDataUtil.toNamed({prefix: pressName}, "press"),
            AnimationDataUtil.toNamed({prefix: confirmName}, "confirm"),
            AnimationDataUtil.toNamed({prefix: confirmName}, "confirm-hold")
        ];
    }

    override function fetchNoteAnimationData(dir) {
        var arrowName = mkHooks.MULTIKEY_COLORS[Strumline.KEY_COUNT][dir];

        return AnimationDataUtil.toNamed({prefix: arrowName});
    }

    override function buildNoteAnimations(target:NoteSprite) {
        for (i in 0...new MultikeyHooks().NOTE_COLORS.length)
            target.animation.addByPrefix(new MultikeyHooks().NOTE_COLORS[i] + "Scroll", mkHooks.NOTE_COLORS[i]);
    }

    // Enabling
    override function isHoldNoteCoverEnabled() {
        if (!super.isHoldNoteCoverEnabled()) return false;
        return Strumline.KEY_COUNT == 4;
    }

    override function isNoteSplashEnabled() {
        if (!super.isNoteSplashEnabled()) return false;
        return Strumline.KEY_COUNT == 4;
    }

    // Scaling
    override function fetchHoldNoteScale() {
        return super.fetchHoldNoteScale() * mkHooks.NOTE_SCALES[Strumline.KEY_COUNT];
    }

    override function getNoteScale() {
        return super.getNoteScale() * mkHooks.NOTE_SCALES[Strumline.KEY_COUNT];
    }

    override function getStrumlineScale() {
        return super.getStrumlineScale() * mkHooks.NOTE_SCALES[Strumline.KEY_COUNT];
    }
}