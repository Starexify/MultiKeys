import funkin.input.FunkinAction;
import funkin.input.PreciseInputManager;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.ScriptedModule;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.play.notes.NoteSprite;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import funkin.save.Save;
import funkin.util.Constants;
import funkin.util.tools.StringTools;

import flixel.FlxG;
import flixel.input.actions.FlxAction;
import flixel.input.actions.FlxActionDigital;
import flixel.math.FlxMath;

import Lambda;
import funkin.Preferences;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;

class MultikeyManager extends ScriptedModule {
    var multikeysOptions:Null<MultikeySaveData> = Save.instance.modOptions.get("multikeys");
    var mkHooks:MultikeyHooks;

    var state:PlayState;
    var keysCount:Int;

    var inputPressQueue:Array<PreciseInputEvent> = [];
    var inputReleaseQueue:Array<PreciseInputEvent> = [];

    var justPressedActions = [];
    var justReleasedActions = [];

    function new() {
        super("MultikeyManager", FlxMath.MIN_VALUE_INT + 1);
        mkHooks = new MultikeyHooks();
    }

    // Setup Multikey
    override function onStateChangeBegin(event:StateChangeScriptEvent) {
        FlxG.signals.preStateCreate.addOnce(onStateChange);
    }

    override function onSubStateOpenBegin(event:SubStateScriptEvent) {
        if (!Std.isOfType(event.targetState, PlayState) && !Std.isOfType(event.targetState, PauseSubState)) cleanup();
        onStateChange(event.targetState);
    }

    function onStateChange(state) {
        if (Std.isOfType(state, PlayState)) setupMultikey(Strumline.KEY_COUNT);
    }

    function setupMultikey(keyCount:Int) {
        Strumline.STRUMLINE_SIZE = Std.int(104 * mkHooks.NOTE_SCALES[Strumline.KEY_COUNT]);
        Strumline.NOTE_SPACING = mkHooks.NOTE_GAPS[Strumline.KEY_COUNT];
        Strumline.DIRECTIONS = [];
        for (i in 0...Strumline.KEY_COUNT) Strumline.DIRECTIONS.push(i);
        NoteSprite.DIRECTION_COLORS = mkHooks.MULTIKEY_COLORS[Strumline.KEY_COUNT];
    }

    override function onSongEvent(event:SongEventScriptEvent) {
        if (event.eventData.eventKind == "KeyCountEvent") {
            keysCount = event.eventData.value?.keyCount;
            if (keysCount == Strumline.KEY_COUNT) return;
            Strumline.KEY_COUNT = event.eventData.value?.keyCount;
            setupMultikey(Strumline.KEY_COUNT);
            refreshStrumline(state?.playerStrumline, Strumline.KEY_COUNT);
            refreshStrumline(state?.opponentStrumline, Strumline.KEY_COUNT);
            initPreciseInputs();
        }
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null) return;

        state = PlayState.instance;
        //Strumline.NOTE_SPLASH_CAP = 16;
        processExtraNotes(state.playerStrumline, Strumline.KEY_COUNT);
        processExtraNotes(state.opponentStrumline, Strumline.KEY_COUNT);
    }

    override function onCountdownStart(event:CountdownScriptEvent) {
        if (state != null && Strumline.KEY_COUNT != 4) initPreciseInputs();
    }

    override function onUpdate(event:UpdateScriptEvent) {
        // Handle keybinds
        if (state == null || state.criticalFailure || PlayState.instance.isGamePaused) return;
        if (Strumline.KEY_COUNT == 4) return;
        for (i in 0...justPressedActions.length) {
            // Get timestamp only once per frame
            var ts = PreciseInputManager.getCurrentTimestamp();
            if (justPressedActions[i].check()) onKeyPress({noteDirection: i, timestamp: ts});
            if (justReleasedActions[i].check()) onKeyRelease({noteDirection: i, timestamp: ts});
        }
        processInputQueue();
    }

    function processInputQueue() {
        if (inputPressQueue.length + inputReleaseQueue.length == 0) return;

        // Ignore inputs during cutscenes.
        if (state.isInCutscene || state.disableKeys) {
            inputPressQueue = [];
            inputReleaseQueue = [];
            return;
        }

        var notesInRange:Array<NoteSprite> = state.playerStrumline.getNotesMayHit();
        var holdNotesInRange = PlayState.instance.playerStrumline.getHoldNotesHitOrMissed();

        var notesByDirection:Array<Array<NoteSprite>> = [for (i in 0...Strumline.KEY_COUNT) []];
        for (note in notesInRange) notesByDirection[note.direction].push(note);

        // Process press queue
        while (inputPressQueue.length > 0) {
            var input:PreciseInputEvent = inputPressQueue.shift();
            state.playerStrumline.pressKey(input.noteDirection);

            // Don't credit or penalize inputs in Bot Play.
            if (state.isBotPlayMode) continue;

            var notesInDirection:Array<NoteSprite> = notesByDirection[input.noteDirection];

            if (!Constants.GHOST_TAPPING && notesInDirection.length == 0) {
                state.ghostNoteMiss(input.noteDirection, notesInRange.length > 0);
                state.playerStrumline.playPress(input.noteDirection);
            } else if (Constants.GHOST_TAPPING && holdNotesInRange.length + notesInRange.length > 0 && notesInDirection.length == 0) {
                state.ghostNoteMiss(input.noteDirection, notesInRange.length > 0);
                state.playerStrumline.playPress(input.noteDirection);
            } else if (notesInDirection.length > 0) {
                var targetNote = Lambda.find(notesInDirection, note -> !note.lowPriority);
                if (targetNote == null) targetNote = notesInDirection[0];
                if (targetNote == null) continue;

                state.goodNoteHit(targetNote, input);
                notesInDirection.remove(targetNote);
                state.playerStrumline.playConfirm(input.noteDirection);
            } else {
                state.playerStrumline.playPress(input.noteDirection);
            }
        }

        // Process release queue
        while (inputReleaseQueue.length > 0) {
            var input:PreciseInputEvent = inputReleaseQueue.shift();

            state.playerStrumline.playStatic(input.noteDirection);
            state.playerStrumline.releaseKey(input.noteDirection);
        }
    }

    // Inputs
    function initPreciseInputs() {
        inputPressQueue = [];
        inputReleaseQueue = [];
        justPressedActions = [];
        justReleasedActions = [];

        var inputManager = PreciseInputManager.instance;

        inputManager.clearKeys();

        inputManager.onInputPressed.removeAll();
        inputManager.onInputReleased.removeAll();
/*        inputManager.onInputPressed.add(ev -> onKeyPress(ev));
        inputManager.onInputReleased.add(ev -> onKeyRelease(ev));*/

        initializeKeys(inputManager);
    }

    function initializeKeys(inputManager:PreciseInputManager) {
        var keySets = multikeysOptions.controls[Strumline.KEY_COUNT - 1];
        var i = 0;
        for (keyList in keySets) {
            var keyName = "multikey_" + StringTools.toLowerKebabCase(mkHooks.NOTE_DIRECTION_NAMES[Strumline.KEY_COUNT - 1][i]);
            var pressAction = new FlxActionDigital(keyName + "-press");
            //var pressAction = new FunkinAction(keyName + "-press");
            justPressedActions.push(pressAction);
            var releaseAction = new FlxActionDigital(keyName + "-release");
            //var releaseAction = new FunkinAction(keyName + "-release");
            justReleasedActions.push(releaseAction);

            for (bind in keyList) {
                pressAction.addKey(bind, 2);
                releaseAction.addKey(bind, -1);
            }

            i++;
        }
    }

    /**
     * Callback executed when one of the note keys is pressed.
     */
    function onKeyPress(event:PreciseInputEvent) {
        if (!state.isGamePaused) inputPressQueue.push(event);
    }

    /**
     * Callback executed when one of the note keys is released.
     */
    function onKeyRelease(event:PreciseInputEvent) {
        if (!state.isGamePaused) inputReleaseQueue.push(event);
    }

    // Helper Methods
    function processExtraNotes(strumline:Strumline, totalKeys:Int) {
        // TODO: Fix X/Y position of Strumline respectively StrumNotes
/*        if (totalKeys < 4) {
            var centering = 20;
            if (strumline == state.playerStrumline) {
                strumline.x = FlxG.width / 2 + Constants.STRUMLINE_X_OFFSET - centering;
            } else {
                strumline.x = Constants.STRUMLINE_X_OFFSET - centering;
            }
        }*/
        var notesArray = strumline.strumlineNotes.members;
        for (i in 0...totalKeys) {
            if (notesArray[i] != null) {
                notesArray[i].direction = mkHooks.NOTE_DIRECTIONS[totalKeys][i];
                notesArray[i].x = strumline.x;
                notesArray[i].x += Strumline.DIRECTIONS[i] * Strumline.NOTE_SPACING;
                notesArray[i].x -= Strumline.NUDGE;
                strumline.noteStyle.applyStrumlineOffsets(notesArray[i]);
                //trace("[MK] Processed extra note: Direction = " + notesArray[i].direction + ", Index = " + i + (strumline == state.playerStrumline ? " (Player)" : " (Opponent)"));
            }
        }
    }

    function refreshStrumline(strumline:Strumline, totalKeys:Int) {
        if (strumline == null || strumline.strumlineNotes == null || strumline.strumlineNotes.members.length == 0) {
            createNewNotes(strumline, totalKeys);
            return;
        }

        // Animate the old notes out
        var oldNotesRemaining = strumline.strumlineNotes.members.length;
        var capturedStrumline = strumline;
        var capturedTotalKeys = totalKeys;

        for (note in strumline.strumlineNotes.members) {
            var jumpHeight = Preferences.downscroll ? -10 : 10;

            FlxTween.tween(note, {y: note.y + jumpHeight, alpha: 0}, 0.1, {
                ease: FlxEase.circIn,
                onComplete: tween -> {
                    oldNotesRemaining--;

                    // Once all old notes are gone, create the new ones
                    if (oldNotesRemaining <= 0) createNewNotes(capturedStrumline, capturedTotalKeys);
                }
            });
        }
    }

    function createNewNotes(strumline:Strumline, totalKeys:Int) {
        var capturedStrumline = strumline;
        var capturedTotalKeys = totalKeys;

        strumline.strumlineNotes.clear();

        strumline.background.scale.x = Std.int(strumline.width / 2 + Strumline.BACKGROUND_PAD);
        strumline.background.x = strumline.x - Strumline.BACKGROUND_PAD;
        strumline.background.updateHitbox();

        for (i in 0...totalKeys) {
            var child:StrumlineNote = new StrumlineNote(strumline.noteStyle, strumline.isPlayer, Strumline.DIRECTIONS[i]);
            child.x = Strumline.DIRECTIONS[i] * Strumline.NOTE_SPACING;
            child.x -= Strumline.INITIAL_OFFSET;
            strumline.noteStyle.applyStrumlineOffsets(child);

            var jumpHeight = Preferences.downscroll ? -10 : 10;
            child.alpha = 0;

            strumline.strumlineNotes.add(child);
            processExtraNotes(capturedStrumline, capturedTotalKeys);
            FlxTween.tween(child, {y: child.y + jumpHeight, alpha: 1}, 0.2, {
                ease: FlxEase.circOut,
            });
        }
    }

    // Cleanup
    override function onSubStateCloseBegin(event:SubStateScriptEvent) { if (Std.isOfType(event.targetState, PlayState)) cleanup(); }

    override function onSongEnd(event:ScriptEvent) { cleanup(); }

    override function onDestroy(event:ScriptEvent) { cleanup(); }

    function cleanup() {
        state = null;
        PreciseInputManager.instance.onInputPressed.removeAll();
        PreciseInputManager.instance.onInputReleased.removeAll();
    }
}