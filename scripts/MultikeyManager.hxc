import funkin.PlayerSettings;
import funkin.data.song.importer.FNFLegacyImporter;
import funkin.input.Control;
import funkin.input.Controls;
import funkin.input.FunkinAction;
import funkin.input.PreciseInputManager;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.ScriptedModule;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.play.notes.NoteSprite;
import funkin.play.notes.Strumline;
import funkin.save.Save;
import funkin.ui.debug.charting.ChartEditorState;
import funkin.ui.debug.charting.handlers.ChartEditorThemeHandler;
import funkin.util.tools.StringTools;

import flixel.FlxG;
import flixel.input.FlxInput;
import flixel.input.actions.FlxInputDevice;
import flixel.math.FlxMath;

import Lambda;

class MultikeyManager extends ScriptedModule {
    var multikeysOptions:Null<MultikeySaveData> = Save.instance.modOptions.get("multikeys");
    var mkHooks:MultikeyHooks;

    var state:PlayState;
    var playerStrumline:Strumline;
    var inputPressQueue:Array<PreciseInputEvent> = [];
    var inputReleaseQueue:Array<PreciseInputEvent> = [];

    function new() {
        super("MultikeyManager", FlxMath.MIN_VALUE_INT);
        mkHooks = new MultikeyHooks();
    }

    function onStateChange(state) {
        if (Std.isOfType(state, PlayState)) setupMultikey();
    }

    override function onStateChangeBegin(event:StateChangeScriptEvent) {
        FlxG.signals.preStateCreate.addOnce(onStateChange);
    }

    override function onSubStateOpenBegin(event:SubStateScriptEvent) {
        if (!Std.isOfType(event.targetState, PlayState) && !Std.isOfType(event.targetState, PauseSubState)) cleanup();
        onStateChange(event.targetState);
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (Std.isOfType(event.targetState, ChartEditorState)) {
            for (waveform in event.targetState.audioWaveforms) {
                if (waveform.x == 840) {
                    var offset = (Strumline.KEY_COUNT * ChartEditorState.GRID_SIZE) - 160;
                    waveform.x += offset;
                }
                else if (waveform.x == 360) {
                    var offset = -(Strumline.KEY_COUNT * ChartEditorState.GRID_SIZE) + 160;
                    waveform.x += offset;
                }
            }
            event.targetState.buttonSelectOpponent.width = ChartEditorState.GRID_SIZE * Strumline.KEY_COUNT;
            event.targetState.buttonSelectPlayer.width = ChartEditorState.GRID_SIZE * Strumline.KEY_COUNT;
            event.targetState.buttonSelectPlayer.x = event.targetState.buttonSelectOpponent.x + event.targetState.buttonSelectOpponent.width;
            event.targetState.buttonSelectEvent.x = event.targetState.buttonSelectPlayer.x + event.targetState.buttonSelectPlayer.width;
        }
    }

    function setupMultikey() {
        Strumline.KEY_COUNT = 4;

        Strumline.KEY_COUNT = 7;
        ChartEditorState.STRUMLINE_SIZE = Strumline.KEY_COUNT;
        ChartEditorThemeHandler.TOTAL_COLUMN_COUNT = ChartEditorState.STRUMLINE_SIZE * 2 + 1;
        ChartEditorState.NOTE_PREVIEW_X_POS = -(Strumline.KEY_COUNT * ChartEditorState.GRID_SIZE) + 480;
        FNFLegacyImporter.STRUMLINE_SIZE = Strumline.KEY_COUNT;
        Strumline.STRUMLINE_SIZE = Std.int(104 * mkHooks.NOTE_SCALES[Strumline.KEY_COUNT]);
        Strumline.NOTE_SPACING = mkHooks.NOTE_GAPS[Strumline.KEY_COUNT];
        Strumline.DIRECTIONS = [];
        for (i in 0...Strumline.KEY_COUNT) Strumline.DIRECTIONS.push(i);
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null && Strumline.KEY_COUNT == 4) return;
        state = PlayState.instance;
        playerStrumline = state.playerStrumline;

        var totalKeys = Strumline.KEY_COUNT;
        processExtraNotes(playerStrumline, totalKeys);
        processExtraNotes(state.opponentStrumline, totalKeys);
    }

    override function onCountdownStart(event:CountdownScriptEvent) {
        if (Strumline.KEY_COUNT != 4) initPreciseInputs();
    }

    override function onUpdate(event:UpdateScriptEvent) {
        // Handle keybinds.
        if (state == null || Strumline.KEY_COUNT == 4) return;
        processInputQueue();
    }

    function processInputQueue() {
        if (inputPressQueue.length + inputReleaseQueue.length == 0) return;

        // Ignore inputs during cutscenes.
        if (state.isInCutscene || state.disableKeys) {
            inputPressQueue = [];
            inputReleaseQueue = [];
            return;
        }

        var notesInRange:Array<NoteSprite> = playerStrumline.getNotesMayHit();

        var notesByDirection:Array<Array<NoteSprite>> = [];
        for (i in 0...Strumline.KEY_COUNT) notesByDirection.push([]);

        for (note in notesInRange) notesByDirection[note.direction].push(note);
        while (inputPressQueue.length > 0) {
            var input:PreciseInputEvent = inputPressQueue.shift();
            playerStrumline.pressKey(input.noteDirection);

            // Don't credit or penalize inputs in Bot Play.
            if (state.isBotPlayMode) continue;

            var notesInDirection:Array<NoteSprite> = notesByDirection[input.noteDirection];

            #if FEATURE_GHOST_TAPPING
            if ((!playerStrumline.mayGhostTap()) && notesInDirection.length == 0)
                #else
            if (notesInDirection.length == 0) #end {
                // Pressed a wrong key with no notes nearby.
                // Perform a ghost miss (anti-spam).
                state.ghostNoteMiss(input.noteDirection, notesInRange.length > 0);

                // Play the strumline animation.
                playerStrumline.getByIndex(mkHooks.DIRECTIONS.indexOf(input.noteDirection)).playPress();
                trace("PENALTY Score: " + state.songScore);
            } else if (notesInDirection.length == 0) {
                // Press a key with no penalty.

                // Play the strumline animation.
                playerStrumline.getByIndex(mkHooks.DIRECTIONS.indexOf(input.noteDirection)).playPress();
                trace("NO PENALTY Score: " + state.songScore);
            } else {
                // Choose the first note, deprioritizing low priority notes.
                var targetNote:Null<NoteSprite> = Lambda.find(notesInDirection, note -> !note.lowPriority);
                if (targetNote == null) targetNote = notesInDirection[0];
                if (targetNote == null) continue;

                // Judge and hit the note.
                state.goodNoteHit(targetNote, input);

                notesInDirection.remove(targetNote);

                // Play the strumline animation.
                playerStrumline.getByIndex(mkHooks.DIRECTIONS.indexOf(input.noteDirection)).playConfirm();
            }
        }

        while (inputReleaseQueue.length > 0) {
            var input:PreciseInputEvent = inputReleaseQueue.shift();

            // Play the strumline animation.
            playerStrumline.getByIndex(mkHooks.DIRECTIONS.indexOf(input.noteDirection)).playStatic();
            playerStrumline.releaseKey(input.noteDirection);
        }
    }

    // Inputs
    function initPreciseInputs() {
        var inputManager = PreciseInputManager.instance;

        inputManager.onInputPressed.removeAll();
        inputManager.onInputReleased.removeAll();
        inputManager.onInputPressed.add(onKeyPress);
        inputManager.onInputReleased.add(onKeyRelease);

        var controls = PlayerSettings.player1.controls;
        initializeKeys(inputManager, controls);
    }

    function initializeKeys(inputManager:PreciseInputManager, controls:Controls) {
        inputManager.clearKeys();
        for (noteDirection in mkHooks.DIRECTIONS) {
            var keys = multikeysOptions.controls[Strumline.KEY_COUNT - 1];
            for (keyList in keys) {
                var keyName = "multikey_" + StringTools.toLowerKebabCase(mkHooks.NOTE_DIRECTION_NAMES[Strumline.KEY_COUNT - 1][noteDirection]);
                var action = new FunkinAction(keyName, keyName + "_JP", keyName + "_JR");
                controls.add(action);

                for (key in keyList) {
                    action.addKey(key, -1);
                    action.addKey(key, 2);
                }

                for (input in action.inputs) {
                    if (input.device == FlxInputDevice.KEYBOARD) {
                        var key = input.inputID;
                        var flxInput = new FlxInput(key);
                        inputManager._keyList.push(key);
                        inputManager._keyListArray.push(flxInput);
                        inputManager._keyListMap.set(key, flxInput);
                        inputManager._keyListDir.set(key, noteDirection);
                    }
                }
                controls.add(action);
            }
        }
    }

    /**
     * Callback executed when one of the note keys is pressed.
     */
    function onKeyPress(event:PreciseInputEvent) {
        if (!state.isGamePaused) inputPressQueue.push(event);
    }

    /**
     * Callback executed when one of the note keys is released.
     */
    function onKeyRelease(event:PreciseInputEvent) {
        if (!state.isGamePaused) inputReleaseQueue.push(event);
    }

    // Helper Methods
    function processExtraNotes(strumline:Strumline, totalKeys:Int) {
        var notesArray = strumline.strumlineNotes.members;

        for (i in 4...totalKeys) {
            if (i < notesArray.length) {
                notesArray[i].direction = mkHooks.NOTE_DIRECTIONS[totalKeys][i % mkHooks.NOTE_DIRECTIONS.length];
                trace("[MK] Processed extra note: Direction = " + notesArray[i].direction + ", Index = " + i + (strumline == playerStrumline ? " (Player)" : " (Opponent)"));
            }
        }
    }

    // Cleanup
    override function onSubStateCloseBegin(event:SubStateScriptEvent) { if (Std.isOfType(event.targetState, PlayState)) cleanup(); }

    override function onSongEnd(event:ScriptEvent) { cleanup(); }

    override function onDestroy(event:ScriptEvent) { cleanup(); }

    function cleanup() {
        state = null;
        PreciseInputManager.instance.onInputPressed.removeAll();
        PreciseInputManager.instance.onInputReleased.removeAll();
    }
}