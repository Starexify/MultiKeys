import funkin.modding.events.ScriptEvent;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;
import funkin.play.notes.NoteSplash;
import funkin.play.notes.Strumline;

import flixel.FlxG;

class MultikeyNoteHandler extends ScriptedModule {
    var mkHooks:MultikeyHooks;

    var state:PlayState;

    // In case you want to handle it yourself you can change this variable !
    var disableCharacterAnims = false;

    function new() {
        super("MultikeyNoteHandler");
        mkHooks = new MultikeyHooks();
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null || Strumline.KEY_COUNT == 4) return;
        state = PlayState.instance;
        Strumline.NOTE_SPLASH_CAP = Strumline.KEY_COUNT + 2;
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (state == null || Strumline.KEY_COUNT == 4) return;

        if (!state.isGamePaused) {
            if (!disableCharacterAnims && state.currentStage != null && state.currentStage.getBoyfriend() != null) {
                var bf = state.currentStage.getBoyfriend();
                if (bf.isSinging()) {
                    for (holdNote in state.playerStrumline.holdNotes.group.members) {
                        // not doing the standard key holding because it looks weird when working with multiple characters on the same strumline
                        if (holdNote != null && holdNote.alive && holdNote.hitNote && !holdNote.missedNote && holdNote.sustainLength > 0) {
                            bf.holdTimer = 0;
                        }
                    }
                }
            }
        }
    }

    override function onNoteHit(event:HitNoteScriptEvent) {
        if (event.eventCanceled) return;
        if (state == null || Strumline.KEY_COUNT == 4) return;
        if (event.doesNotesplash) playNoteSplash(state.playerStrumline, event.note.noteData.data % Strumline.KEY_COUNT);

        if (!disableCharacterAnims) {
            var strumIndex = event.note.noteData.getStrumlineIndex(Strumline.KEY_COUNT);
            var singDir = mkHooks.NOTE_DIRECTIONS[Strumline.KEY_COUNT][event.note.noteData.data];
            switch (strumIndex) {
                case 0:
                    state.currentStage.getBoyfriend().playSingAnimation(singDir, false);
                    state.currentStage.getBoyfriend().holdTimer = 0;
                case 1:
                    state.currentStage.getDad().playSingAnimation(singDir, false);
                    state.currentStage.getDad().holdTimer = 0;
                case 2:
            }
        }
    }

    override function onNoteMiss(event:NoteScriptEvent) {
        if (event.eventCanceled) return;
        if (state == null || Strumline.KEY_COUNT == 4) return;
        if (!disableCharacterAnims) {
            var strumIndex = event.note.noteData.getStrumlineIndex(Strumline.KEY_COUNT);
            var singDir = mkHooks.NOTE_DIRECTIONS[Strumline.KEY_COUNT][event.note.noteData.data];
            switch (strumIndex) {
                case 0:
                    state.currentStage.getBoyfriend().playSingAnimation(singDir, true);
                case 1:
                    state.currentStage.getDad().playSingAnimation(singDir, true);
                case 2:
            }
        }
    }

    override function onNoteGhostMiss(event:GhostMissNoteScriptEvent) {
        if (event.eventCanceled) return;
        if (state == null || Strumline.KEY_COUNT == 4) return;

        if (!disableCharacterAnims) {
            var singDir = mkHooks.NOTE_DIRECTIONS[Strumline.KEY_COUNT][event.dir];
            state.currentStage.getBoyfriend().playSingAnimation(singDir, true);
        }
    }

    function playNoteSplash(strumline:Strumline, dir) {
        if (!strumline.showNotesplash) return;
        var splash = strumline.constructNoteSplash();
        if (splash != null) {
            if (!splash.animation.exists("splash1white")) {
                for (i in 0...mkHooks.NOTE_COLORS.length) {
                    splash.animation.addByPrefix("splash" + mkHooks.NOTE_COLORS[i] + "1", "note impact 1 " + mkHooks.NOTE_COLORS[i] + "0", strumline.noteStyle.getSplashFramerate(), false, false, false);
                    splash.animation.addByPrefix("splash" + mkHooks.NOTE_COLORS[i] + "2", "note impact 2 " + mkHooks.NOTE_COLORS[i] + "0", strumline.noteStyle.getSplashFramerate(), false, false, false);
                }
            }
            var direction = mkHooks.MULTIKEY_DIRECTIONS[Strumline.KEY_COUNT][dir];

            var variant = FlxG.random.int(1, 2);
            splash.playAnimation("splash" + mkHooks.NOTE_COLORS[direction] + variant);
            if (splash.animation.curAnim == null) return;
            splash.animation.curAnim.frameRate = strumline.noteStyle.getSplashFramerate() + FlxG.random.int(-strumline.noteStyle.getSplashFramerateVariance(), strumline.noteStyle.getSplashFramerateVariance());
            splash.animation.onFinish.add(animName -> onAnimationFinished(splash, animName));
            splash.offset.set(splash.width * 0.3, splash.height * 0.3);

            splash.x = strumline.x;
            splash.x += dir * Strumline.NOTE_SPACING;
            splash.x += strumline.noteStyle.getSplashOffsets()[0] * splash.scale.x;

            splash.y = strumline.y;
            splash.y += strumline.noteStyle.getSplashOffsets()[1] * splash.scale.y;
        }
    }

    function onAnimationFinished(splash:NoteSplash, animationName:String):Void {
        splash.kill();
    }

    // Cleanup
    override function onSubStateCloseBegin(event:SubStateScriptEvent) { if (Std.isOfType(event.targetState, PlayState)) state = null; }

    override function onSongEnd(event:ScriptEvent) { state = null; }

    override function onDestroy(event:ScriptEvent) { state = null; }
}