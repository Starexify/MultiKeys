import funkin.modding.events.ScriptEvent;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;
import funkin.play.notes.Strumline;
import funkin.util.tools.StringTools;

import flixel.FlxG;
import flixel.group.FlxTypedSpriteGroup;
import funkin.play.notes.NoteHoldCover;
import flixel.FlxSprite;

class MultikeyNoteHandler extends ScriptedModule {
    var mkHooks:MultikeyHooks;

    var noteHoldCovers:FlxTypedSpriteGroup;
    var glow:FlxSprite;

    var state:PlayState;

    // In case you want to handle it yourself you can change this variable !
    var disableCharacterAnims = false;

    function new() {
        super("MultikeyNoteHandler");
        mkHooks = new MultikeyHooks();
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null) return;
        state = PlayState.instance;
        Strumline.NOTE_SPLASH_CAP = Strumline.KEY_COUNT + 2;
    }

    override function onSongEvent(event:SongEventScriptEvent) {
        if (event.eventData.eventKind == "KeyCountEvent") {
            reinitHoldCovers(state.playerStrumline, event.eventData.value?.keyCount);
            reinitHoldCovers(state.opponentStrumline, event.eventData.value?.keyCount);
        }
    }

    function reinitHoldCovers(strumline:Strumline, totalKeys:Int) {
        trace("Reiniting Hold Covers");
        strumline.noteHoldCovers.destroy();
        noteHoldCovers = new FlxTypedSpriteGroup(0, 0, totalKeys);
        noteHoldCovers.zIndex = 40;
        strumline.noteHoldCovers = noteHoldCovers;
        strumline.add(noteHoldCovers);
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (state == null || Strumline.KEY_COUNT == 4) return;

        if (!state.isGamePaused) {
            if (!disableCharacterAnims && state.currentStage != null && state.currentStage.getBoyfriend() != null) {
                var bf = state.currentStage.getBoyfriend();
                if (bf.isSinging()) {
                    for (holdNote in state.playerStrumline.holdNotes.group.members) {
                        // not doing the standard key holding because it looks weird when working with multiple characters on the same strumline
                        if (holdNote != null && holdNote.alive && holdNote.hitNote && !holdNote.missedNote && holdNote.sustainLength > 0) {
                            bf.holdTimer = 0;
                        }
                    }
                }
            }
        }
    }

    override function onNoteHit(event:HitNoteScriptEvent) {
        if (event.eventCanceled) return;
        if (state == null) return;
        if (event.doesNotesplash) playNoteSplash(state.playerStrumline, event.note.noteData.data % Strumline.KEY_COUNT);

        var strumIndex = event.note.noteData.getStrumlineIndex(Strumline.KEY_COUNT);
        if (!disableCharacterAnims) {
            var singDir = mkHooks.NOTE_DIRECTIONS[Strumline.KEY_COUNT][event.note.noteData.data];
            switch (strumIndex) {
                case 0:
                    state.currentStage.getBoyfriend().playSingAnimation(singDir, false);
                    state.currentStage.getBoyfriend().holdTimer = 0;
                case 1:
                    state.currentStage.getDad().playSingAnimation(singDir, false);
                    state.currentStage.getDad().holdTimer = 0;
            }
        }

        if (event.note.isHoldNote && event.note.holdNoteSprite != null) {
            if (strumIndex == 0) playNoteHoldCover(state.playerStrumline, event.note.holdNoteSprite);
            else playNoteHoldCover(state.opponentStrumline, event.note.holdNoteSprite);
        }
    }

    override function onNoteMiss(event:NoteScriptEvent) {
        if (event.eventCanceled) return;
        if (state == null || Strumline.KEY_COUNT == 4) return;
        if (!disableCharacterAnims) {
            var strumIndex = event.note.noteData.getStrumlineIndex(Strumline.KEY_COUNT);
            var singDir = mkHooks.NOTE_DIRECTIONS[Strumline.KEY_COUNT][event.note.noteData.data];
            switch (strumIndex) {
                case 0:
                    state.currentStage.getBoyfriend().playSingAnimation(singDir, true);
                case 1:
                    state.currentStage.getDad().playSingAnimation(singDir, true);
                case 2:
            }
        }
    }

    override function onNoteGhostMiss(event:GhostMissNoteScriptEvent) {
        if (event.eventCanceled) return;
        if (state == null || Strumline.KEY_COUNT == 4) return;

        if (!disableCharacterAnims) {
            var singDir = mkHooks.NOTE_DIRECTIONS[Strumline.KEY_COUNT][event.dir];
            state.currentStage.getBoyfriend().playSingAnimation(singDir, true);
        }
    }

    // Methods for note anims
    function playNoteSplash(strumline:Strumline, dir) {
        if (!strumline.showNotesplash) return;
        var splash = strumline.constructNoteSplash();
        if (splash != null) {
            if (!splash.animation.exists("splash1white")) {
                for (i in 0...mkHooks.NOTE_COLORS.length) {
                    splash.animation.addByPrefix("splash" + mkHooks.NOTE_COLORS[i] + "1", "note impact 1 " + mkHooks.NOTE_COLORS[i] + "0", strumline.noteStyle.getSplashFramerate(), false, false, false);
                    splash.animation.addByPrefix("splash" + mkHooks.NOTE_COLORS[i] + "2", "note impact 2 " + mkHooks.NOTE_COLORS[i] + "0", strumline.noteStyle.getSplashFramerate(), false, false, false);
                }
            }
            var direction = mkHooks.MULTIKEY_DIRECTIONS[Strumline.KEY_COUNT][dir];

            var variant = FlxG.random.int(1, 2);
            splash.playAnimation("splash" + mkHooks.NOTE_COLORS[direction] + variant);
            if (splash.animation.curAnim == null) return;
            splash.animation.curAnim.frameRate = strumline.noteStyle.getSplashFramerate() + FlxG.random.int(-strumline.noteStyle.getSplashFramerateVariance(), strumline.noteStyle.getSplashFramerateVariance());
            splash.offset.set(splash.width * 0.3, splash.height * 0.3);

            splash.x = strumline.x;
            splash.x += dir * Strumline.NOTE_SPACING;
            splash.x += strumline.noteStyle.getSplashOffsets()[0] * splash.scale.x;

            splash.y = strumline.y;
            splash.y += strumline.noteStyle.getSplashOffsets()[1] * splash.scale.y;
        }
    }

    function playNoteHoldCover(strumline:Strumline, holdNote) {
        if (!strumline.showNotesplash) return;
        var cover = constructNoteHoldCover(strumline);
        if (cover != null) {
            cover.holdNote = holdNote;
            holdNote.cover = cover;

            var dir = holdNote.noteDirection;
            var color = StringTools.toTitleCase(mkHooks.MULTIKEY_COLORS[Strumline.KEY_COUNT][dir]);
            glow.animation.play("holdCoverStart" + color);
            //trace(cover.glow.animation.name + " " + dir);

            cover.x = strumline.x;
            cover.x += dir * Strumline.NOTE_SPACING;
            cover.x += Strumline.STRUMLINE_SIZE / 2;
            cover.x -= cover.width / 2;
            cover.x += strumline.noteStyle.getHoldCoverOffsets()[0] * cover.scale.x;
            cover.x += -12;

            cover.y = strumline.y;
            cover.y += Strumline.STRUMLINE_SIZE / 2;
            cover.y += strumline.noteStyle.getHoldCoverOffsets()[1] * cover.scale.y;
            cover.y += -96;
        }
    }

    function constructNoteHoldCover(strumline:Strumline) {
        var result:NoteHoldCover = null;

        // If we haven't filled the pool yet...
        if (noteHoldCovers.length < noteHoldCovers.maxSize) {
            // Create a new note hold cover.
            result = new NoteHoldCover(strumline.noteStyle);
            glow = new FlxSprite();
            result.add(glow);
            strumline.noteStyle.buildHoldCoverSprite(result);
            glow.animation.onFinish.add(result.onAnimationFinished);

            result.glow = glow;

            noteHoldCovers.add(result);
        } else {
            // Else, find a note splash which is inactive so we can revive it.
            result = noteHoldCovers.getFirstAvailable();

            if (result != null) {
                result.revive();
            } else {
                // The note hold cover pool is full and all note hold covers are active,
                // so we just pick one at random to destroy and restart.
                result = FlxG.random.getObject(noteHoldCovers.members);
            }
        }

        return result;
    }

    // Cleanup
    override function onSubStateCloseBegin(event:SubStateScriptEvent) { if (Std.isOfType(event.targetState, PlayState)) state = null; }

    override function onSongEnd(event:ScriptEvent) { state = null; }

    override function onDestroy(event:ScriptEvent) { state = null; }
}